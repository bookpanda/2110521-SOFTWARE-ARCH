# docker-compose.yml

services:
  # --- PostgreSQL Database for Kong ---
  kong-database:
    image: postgres:13-alpine
    container_name: kong-database
    networks:
      - kong-net
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong -d kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Kong Migrations ---
  # This job runs once to set up the database schema for Kong.
  kong-migrations:
    image: kong/kong:latest
    command: "kong migrations bootstrap"
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    depends_on:
      kong-database:
        condition: service_healthy

  kong-migrations-up:
    image: kong/kong:latest
    command: "kong migrations up && kong migrations finish"
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    depends_on:
      kong-migrations:
        condition: service_completed_successfully

  # --- Kong API Gateway with Kong Manager ---
  kong:
    image: kong/kong:latest
    container_name: kong
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
    ports:
      - "8000:8000" # Proxy traffic
      - "8001:8001" # Admin API
      - "8002:8002" # Kong Manager UI
      - "8443:8443" # Proxy traffic SSL
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    depends_on:
      kong-migrations-up:
        condition: service_completed_successfully

  konga:
    image: pantsel/konga
    container_name: konga
    depends_on:
      - kong-database
    networks:
      - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_PORT: 5432
      DB_USER: kong
      DB_PASSWORD: kong
      DB_DATABASE: konga
      NODE_ENV: development # IMPORTANT: to populate the database
      DB_AUTO_MIGRATE: "true"
    ports:
      - "1337:1337"
    restart: on-failure

  # --- MongoDB Database ---
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    networks:
      - kong-net
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: restaurant_db
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Mongo Express (MongoDB GUI) ---
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    networks:
      - kong-net
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    ports:
      - "8081:8081"
    restart: on-failure
    depends_on:
      mongodb:
        condition: service_healthy

  # --- Restaurants Service ---
  restaurants-server:
    image: node:22-alpine
    container_name: restaurants-server
    working_dir: /app
    command: sh -c "npm install && npm run server"
    networks:
      - kong-net
    environment:
      PORT: 30043
      MONGODB_URI: mongodb://root:example@mongodb:27017/restaurant_db?authSource=admin
    ports:
      - "30043:30043"
    volumes:
      - ./restaurants:/app
      - /app/node_modules
    restart: on-failure
    depends_on:
      mongodb:
        condition: service_healthy

  restaurants-client:
    image: node:22-alpine
    container_name: restaurants-client
    working_dir: /app
    command: sh -c "npm install && npm run client"
    networks:
      - kong-net
    environment:
      PORT: 3000
      SERVICE_API_URL: restaurants-server:30043
    ports:
      - "3000:3000"
    volumes:
      - ./restaurants:/app
      - /app/node_modules
    restart: on-failure
    depends_on:
      restaurants-server:
        condition: service_started

# --- Docker Network Definition ---
networks:
  kong-net:
    driver: bridge
